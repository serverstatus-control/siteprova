{"version":3,"file":"service-detail-DuSv_Ngh.js","sources":["../../../src/components/UptimeHistory.tsx","../../../src/components/UptimeChart.tsx","../../../src/pages/service-detail.tsx"],"sourcesContent":["import React from 'react';\r\nimport { UptimeHistory } from '../types';\r\nimport { format } from 'date-fns';\r\nimport { it, enUS, es, fr, de, pt, ru, zhCN, ja, Locale } from 'date-fns/locale';\r\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\nimport { useSettings } from '@/hooks/use-settings';\r\n\r\ninterface UptimeHistoryProps {\r\n  history: UptimeHistory[];\r\n}\r\n\r\nconst localeMap: Record<string, Locale> = {\r\n  it, en: enUS, es, fr, de, pt, ru, zh: zhCN, ja\r\n};\r\n\r\nconst UptimeHistoryDisplay: React.FC<UptimeHistoryProps> = ({ history }) => {\r\n  const { t, language } = useSettings();\r\n\r\n  // Sort history by date, newest first\r\n  const sortedHistory = [...history].sort((a, b) => \r\n    new Date(b.date).getTime() - new Date(a.date).getTime()\r\n  );\r\n\r\n  const getStatusColor = (status: string, percentage: number) => {\r\n    if (status === 'down') return 'bg-danger';\r\n    if (status === 'degraded' || percentage < 95) return 'bg-warning';\r\n    return 'bg-success';\r\n  };\r\n\r\n  const getTextColor = (status: string, percentage: number) => {\r\n    if (status === 'down') return 'text-danger';\r\n    if (status === 'degraded' || percentage < 95) return 'text-warning';\r\n    return 'text-success';\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    const locale = localeMap[language] || enUS;\r\n    return format(date, 'd MMM HH:mm', { locale });\r\n  };\r\n\r\n  const [mounted, setMounted] = React.useState(false);\r\n  React.useEffect(() => {\r\n    const t = setTimeout(() => setMounted(true), 50);\r\n    return () => clearTimeout(t);\r\n  }, []);\r\n\r\n  return (\r\n    <TooltipProvider>\r\n      <div className=\"space-y-3\">\r\n        {sortedHistory.map((item, index) => {\r\n          const statusColor = getStatusColor(item.status, item.uptimePercentage);\r\n          const textColor = getTextColor(item.status, item.uptimePercentage);\r\n          const displayDate = formatDate(item.date);\r\n          const tooltipText = `${item.uptimePercentage}% uptime - ${item.status.charAt(0).toUpperCase() + item.status.slice(1)}`;\r\n          return (\r\n            <div key={index} className=\"flex items-center gap-3\">\r\n              <span className=\"text-xs text-gray-400 w-20\">{displayDate}</span>\r\n              <Tooltip>\r\n                <TooltipTrigger asChild>\r\n                  <div className=\"flex-1 h-3 rounded overflow-hidden bg-dark-light cursor-pointer\">\r\n                    {/* inner bar: width represents uptimePercentage; transition for smooth daily updates */}\r\n                    <div\r\n                      className={`${statusColor} h-full rounded transition-all duration-700 ease-out`}\r\n                      style={{ width: mounted ? `${item.uptimePercentage}%` : '0%' }}\r\n                      aria-hidden\r\n                    />\r\n                  </div>\r\n                </TooltipTrigger>\r\n                <TooltipContent side=\"top\">\r\n                  {tooltipText}\r\n                </TooltipContent>\r\n              </Tooltip>\r\n              <span className={`text-xs font-mono px-2 py-0.5 rounded-full ${textColor} bg-opacity-90 bg-gray-800 text-white font-semibold shadow`}>\r\n                {item.uptimePercentage}%\r\n              </span>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </TooltipProvider>\r\n  );\r\n};\r\n\r\nexport default UptimeHistoryDisplay;\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { UptimeHistory } from '../types';\r\nimport { useSettings } from '../hooks/use-settings';\r\n\r\ninterface UptimeChartProps {\r\n  history: UptimeHistory[];\r\n  className?: string;\r\n}\r\n\r\nconst UptimeChart: React.FC<UptimeChartProps> = ({ history, className = '' }) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const { t } = useSettings();\r\n\r\n  // Converte la history reale in una serie per le ultime 24 ore, senza simulazioni\r\n  const buildLast24hSeries = () => {\r\n    const now = new Date();\r\n    const cutoff = now.getTime() - 24 * 60 * 60 * 1000;\r\n\r\n    // Filtra solo dati nelle ultime 24h\r\n    const recent = history\r\n      .map(h => ({ ...h, dateObj: new Date(h.date) }))\r\n      .filter(h => h.dateObj.getTime() >= cutoff)\r\n      .sort((a, b) => a.dateObj.getTime() - b.dateObj.getTime());\r\n\r\n    // Mappa ai punti del grafico: se pi√π punti nella stessa ora, prendi l'ultimo\r\n    const byHour = new Map<number, { time: Date; uptime: number; status: string }>();\r\n    for (const h of recent) {\r\n      const hourBucket = new Date(h.dateObj);\r\n      hourBucket.setMinutes(0, 0, 0);\r\n      byHour.set(hourBucket.getTime(), {\r\n        time: new Date(hourBucket),\r\n        uptime: h.uptimePercentage,\r\n        status: h.status,\r\n      });\r\n    }\r\n\r\n    // Costruisci una serie ordinata per tutte le ore dove abbiamo dati\r\n    const series = Array.from(byHour.values()).sort((a, b) => a.time.getTime() - b.time.getTime());\r\n    return series;\r\n  };\r\n\r\n  const drawChart = () => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n  const data = buildLast24hSeries();\r\n    const width = canvas.width;\r\n    const height = canvas.height;\r\n    const padding = 40;\r\n    const chartWidth = width - padding * 2;\r\n    const chartHeight = height - padding * 2;\r\n\r\n    // Clear canvas\r\n    ctx.clearRect(0, 0, width, height);\r\n\r\n    // Set up colors based on theme\r\n    const backgroundColor = '#1a1a1a';\r\n    const gridColor = '#333333';\r\n    const textColor = '#9ca3af';\r\n    \r\n    // Draw background\r\n    ctx.fillStyle = backgroundColor;\r\n    ctx.fillRect(0, 0, width, height);\r\n\r\n    // Draw grid lines\r\n    ctx.strokeStyle = gridColor;\r\n    ctx.lineWidth = 1;\r\n    \r\n    // Horizontal grid lines\r\n    for (let i = 0; i <= 4; i++) {\r\n      const y = padding + (chartHeight * i) / 4;\r\n      ctx.beginPath();\r\n      ctx.moveTo(padding, y);\r\n      ctx.lineTo(width - padding, y);\r\n      ctx.stroke();\r\n    }\r\n\r\n    // Vertical grid lines (every 4 hours)\r\n    for (let i = 0; i <= 6; i++) {\r\n      const x = padding + (chartWidth * i) / 6;\r\n      ctx.beginPath();\r\n      ctx.moveTo(x, padding);\r\n      ctx.lineTo(x, height - padding);\r\n      ctx.stroke();\r\n    }\r\n\r\n    // Se non ci sono dati nelle ultime 24h, mostra solo la griglia e un messaggio\r\n    if (!data.length) {\r\n      ctx.fillStyle = textColor;\r\n      ctx.font = '13px Inter, sans-serif';\r\n      ctx.textAlign = 'center';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillText(t.noHistoryAvailable, width / 2, height / 2);\r\n      return;\r\n    }\r\n\r\n    // Draw uptime line\r\n    ctx.lineWidth = 3;\r\n    ctx.lineCap = 'round';\r\n    ctx.lineJoin = 'round';\r\n\r\n    // Create gradient for the line\r\n    const gradient = ctx.createLinearGradient(0, padding, 0, height - padding);\r\n    gradient.addColorStop(0, '#10b981'); // Success green\r\n    gradient.addColorStop(0.7, '#f59e0b'); // Warning yellow\r\n    gradient.addColorStop(1, '#ef4444'); // Error red\r\n\r\n    ctx.strokeStyle = gradient;\r\n\r\n    ctx.beginPath();\r\n    data.forEach((point, index) => {\r\n      const x = padding + (chartWidth * index) / (data.length - 1);\r\n      const y = height - padding - (chartHeight * point.uptime) / 100;\r\n      \r\n      if (index === 0) {\r\n        ctx.moveTo(x, y);\r\n      } else {\r\n        ctx.lineTo(x, y);\r\n      }\r\n    });\r\n    ctx.stroke();\r\n\r\n    // Draw data points with status colors\r\n    data.forEach((point, index) => {\r\n      const x = padding + (chartWidth * index) / (data.length - 1);\r\n      const y = height - padding - (chartHeight * point.uptime) / 100;\r\n      \r\n      // Choose color based on status\r\n      let pointColor = '#10b981'; // Success green\r\n      if (point.status === 'degraded') pointColor = '#f59e0b'; // Warning yellow\r\n      if (point.status === 'down') pointColor = '#ef4444'; // Error red\r\n      \r\n      ctx.fillStyle = pointColor;\r\n      ctx.beginPath();\r\n      ctx.arc(x, y, 4, 0, 2 * Math.PI);\r\n      ctx.fill();\r\n      \r\n      // Add a white border for better visibility\r\n      ctx.strokeStyle = '#ffffff';\r\n      ctx.lineWidth = 1;\r\n      ctx.stroke();\r\n    });\r\n\r\n    // Draw Y-axis labels (uptime percentages)\r\n    ctx.fillStyle = textColor;\r\n    ctx.font = '12px Inter, sans-serif';\r\n    ctx.textAlign = 'right';\r\n    ctx.textBaseline = 'middle';\r\n\r\n    for (let i = 0; i <= 4; i++) {\r\n      const y = padding + (chartHeight * i) / 4;\r\n      const value = 100 - (i * 25);\r\n      ctx.fillText(value + '%', padding - 10, y);\r\n    }\r\n\r\n    // Draw X-axis labels (time)\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'top';\r\n\r\n    for (let i = 0; i <= 6; i++) {\r\n      const x = padding + (chartWidth * i) / 6;\r\n      const dataIndex = Math.floor((data.length - 1) * i / 6);\r\n      const time = data[dataIndex].time;\r\n      const timeString = time.getHours().toString().padStart(2, '0') + ':00';\r\n      ctx.fillText(timeString, x, height - padding + 10);\r\n    }\r\n\r\n    // Draw chart title\r\n    ctx.fillStyle = textColor;\r\n    ctx.font = 'bold 14px Inter, sans-serif';\r\n    ctx.textAlign = 'left';\r\n    ctx.textBaseline = 'top';\r\n    ctx.fillText(t.uptimeHistory + ' (24h)', padding, padding - 30);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    // Set canvas size\r\n    const rect = canvas.getBoundingClientRect();\r\n    canvas.width = rect.width * window.devicePixelRatio;\r\n    canvas.height = rect.height * window.devicePixelRatio;\r\n    \r\n    const ctx = canvas.getContext('2d');\r\n    if (ctx) {\r\n      ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\r\n    }\r\n\r\n    drawChart();\r\n  }, [history, t]);\r\n\r\n  return (\r\n    <div className={`relative ${className}`}>\r\n      <canvas\r\n        ref={canvasRef}\r\n        className=\"w-full h-64 rounded-lg bg-gray-900 border border-gray-700\"\r\n        style={{ width: '100%', height: '256px' }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UptimeChart;","import React, { useEffect, useState } from 'react';\r\nimport { useRoute } from 'wouter';\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { Service, UptimeHistory, Incident, Category, StatusSummary } from '../types';\r\nimport Header from '../components/Header';\r\nimport Sidebar from '../components/Sidebar';\r\nimport MobileMenu from '../components/MobileMenu';\r\nimport Footer from '../components/Footer';\r\nimport StatusBadge from '../components/StatusBadge';\r\nimport UptimeHistoryDisplay from '../components/UptimeHistory';\r\nimport UptimeChart from '../components/UptimeChart';\r\nimport { formatDistanceToNow, format } from 'date-fns';\r\nimport { getServiceIcon } from '../lib/icons';\r\nimport { formatTimeAgo, localeMap } from '@/lib/utils';\r\nimport { useSettings } from '@/hooks/use-settings';\r\n\r\nconst ServiceDetail: React.FC = () => {\r\n  const [match, params] = useRoute('/services/:slug');\r\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  const { \r\n    data: categories = [],\r\n    isLoading: isCategoriesLoading\r\n  } = useQuery<Category[]>({\r\n    queryKey: ['/api/categories'],\r\n  });\r\n\r\n  const { \r\n    data: statusSummary = null,\r\n    isLoading: isSummaryLoading\r\n  } = useQuery<StatusSummary>({\r\n    queryKey: ['/api/status-summary'],\r\n  });\r\n\r\n  const { \r\n    data: service,\r\n    isLoading: isServiceLoading,\r\n    error: serviceError\r\n  } = useQuery<Service>({\r\n    queryKey: [`/api/services/${params?.slug}`],\r\n    enabled: !!params?.slug,\r\n    refetchInterval: 24 * 60 * 60 * 1000,\r\n    refetchOnWindowFocus: false,\r\n  });\r\n\r\n  const { \r\n    data: services = [],\r\n    isLoading: isServicesLoading\r\n  } = useQuery<Service[]>({\r\n    queryKey: ['/api/services'],\r\n  });\r\n\r\n  const { \r\n    data: history = [],\r\n    isLoading: isHistoryLoading\r\n  } = useQuery<UptimeHistory[]>({\r\n    queryKey: [`/api/services/${service?.id}/history`],\r\n    enabled: !!service?.id,\r\n    // refetch once per day so the uptime history updates daily\r\n    refetchInterval: 24 * 60 * 60 * 1000,\r\n    refetchOnWindowFocus: false,\r\n  });\r\n\r\n  const { \r\n    data: incidents = [],\r\n    isLoading: isIncidentsLoading\r\n  } = useQuery<Incident[]>({\r\n    queryKey: [`/api/services/${service?.id}/incidents`],\r\n    enabled: !!service?.id,\r\n  });\r\n\r\n  const toggleMobileMenu = () => {\r\n    setIsMobileMenuOpen(!isMobileMenuOpen);\r\n  };\r\n\r\n  const handleSearch = (term: string) => {\r\n    setSearchTerm(term);\r\n  };\r\n\r\n  const { t, language } = useSettings();\r\n\r\n  const formatIncidentDate = (startTime: string, endTime: string | null) => {\r\n    const start = format(new Date(startTime), 'MMM d, yyyy - HH:mm', { locale: localeMap[language] });\r\n    if (!endTime) return `${start} ${t.toPresent || 'to present'}`;\r\n    return `${start} ${t.to || 'to'} ${format(new Date(endTime), 'HH:mm', { locale: localeMap[language] })}`;\r\n  };\r\n\r\n  const isLoading = isCategoriesLoading || isSummaryLoading || \r\n                   isServiceLoading || isHistoryLoading || \r\n                   isIncidentsLoading || isServicesLoading;\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-dark flex items-center justify-center\">\r\n        <div className=\"text-white text-xl\">{t.loadingServices}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (serviceError || !service) {\r\n    return (\r\n      <div className=\"min-h-screen bg-dark flex items-center justify-center\">\r\n        <div className=\"text-white text-xl\">Service not found</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const formattedLastChecked = service.lastChecked ? \r\n    formatTimeAgo(service.lastChecked, language) : \r\n    t.unknown || 'Unknown';\r\n\r\n  return (\r\n    <div className=\"bg-dark text-gray-100 font-sans min-h-screen\">\r\n      <Header \r\n        onMenuToggle={toggleMobileMenu} \r\n        onSearch={handleSearch}\r\n        services={services}\r\n      />\r\n      \r\n      <div className=\"flex min-h-[calc(100vh-64px)]\">\r\n        <Sidebar categories={categories} statusSummary={statusSummary} />\r\n        <MobileMenu \r\n          isOpen={isMobileMenuOpen} \r\n          onClose={toggleMobileMenu} \r\n          categories={categories}\r\n          statusSummary={statusSummary}\r\n        />\r\n        \r\n        <main className=\"flex-1 lg:ml-64 pb-12\">\r\n          <div className=\"container mx-auto px-4 py-6\">\r\n            <div className=\"mb-6\">\r\n              <a href=\"/\" className=\"text-primary hover:text-blue-400 mb-4 inline-flex items-center\">\r\n                <i className=\"fas fa-arrow-left mr-2\"></i>\r\n                Back to Dashboard\r\n              </a>\r\n              \r\n              <div className=\"bg-dark-light p-6 rounded-lg border border-dark-lighter mt-4\">\r\n                <div className=\"flex items-center mb-6\">\r\n                  <div className=\"w-16 h-16 bg-dark-lighter rounded-full flex items-center justify-center mr-6\">\r\n                    <i className={`${service.logo || getServiceIcon(service.name)} text-3xl`}></i>\r\n                  </div>\r\n                  <div>\r\n                    <h1 className=\"text-2xl md:text-3xl font-bold\">{service.name}</h1>\r\n                    <div className=\"flex items-center mt-2\">\r\n                      <StatusBadge status={service.status} className=\"mr-3\" />\r\n                      <span className=\"text-sm text-gray-400\">{t.lastCheck}: {formattedLastChecked}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\r\n                  <div>\r\n                    <h2 className=\"text-lg font-semibold mb-4\">{t.currentStatus || 'Current Status'}</h2>\r\n                    <div className=\"bg-dark-lighter rounded-lg p-4\">\r\n                      <div className=\"grid grid-cols-2 gap-4\">\r\n                        <div>\r\n                          <p className=\"text-xs text-gray-400 mb-1\">{t.responseTime || 'Response Time'}</p>\r\n                          <p className=\"font-mono text-lg\">\r\n                            {service.status === 'down' ? 'Timeout' : `${service.responseTime}ms`}\r\n                          </p>\r\n                        </div>\r\n                        <div>\r\n                          <p className=\"text-xs text-gray-400 mb-1\">{t.uptime30d || 'Uptime (30 days)'}</p>\r\n                          <p className=\"font-mono text-lg\">{service.uptimePercentage}%</p>\r\n                        </div>\r\n                        <div>\r\n                          <p className=\"text-xs text-gray-400 mb-1\">{t.lastOutage || 'Last Outage'}</p>\r\n                          <p className=\"font-mono text-lg\">\r\n                            {incidents.length > 0 \r\n                              ? formatTimeAgo(incidents[0].startTime, language)\r\n                              : t.noRecentOutages || 'No recent outages'}\r\n                          </p>\r\n                        </div>\r\n                        <div>\r\n                          <p className=\"text-xs text-gray-400 mb-1\">{t.avgResponse || 'Avg. Response'}</p>\r\n                          <p className=\"font-mono text-lg\">\r\n                            {service.status === 'down' \r\n                              ? 'N/A' \r\n                              : `${Math.round(history.reduce((sum, item) => sum + item.responseTime, 0) / (history.length || 1))}ms`}\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <h2 className=\"text-lg font-semibold mb-4\">{t.uptimeHistory || 'Uptime History'}</h2>\r\n                    <div className=\"space-y-4\">\r\n                      {/* Nuovo grafico a linee per le ultime 24 ore */}\r\n                      <div className=\"bg-dark-lighter rounded-lg p-4\">\r\n                        <UptimeChart history={history} />\r\n                      </div>\r\n                      \r\n                      {/* Storia dettagliata esistente */}\r\n                      <div className=\"bg-dark-lighter rounded-lg p-4\">\r\n                        <h3 className=\"text-sm font-medium mb-3 text-gray-400\">Cronologia Dettagliata</h3>\r\n                        {history.length > 0 ? (\r\n                          <UptimeHistoryDisplay history={history} />\r\n                        ) : (\r\n                          <p className=\"text-sm text-gray-400\">{t.noHistoryAvailable || 'No history available'}</p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div>\r\n                  <h2 className=\"text-lg font-semibold mb-4\">{t.recentIncidents || 'Recent Incidents'}</h2>\r\n                  <div className=\"bg-dark-lighter rounded-lg p-4\">\r\n                    {incidents.length > 0 ? (\r\n                      <div className=\"space-y-4\">\r\n                        {incidents.map((incident) => (\r\n                          <div key={incident.id} className=\"pb-4 border-b border-gray-700 last:border-0 last:pb-0\">\r\n                            <div className=\"flex items-start\">\r\n                              <span className={`inline-flex items-center justify-center w-6 h-6 rounded-full bg-${incident.status === 'down' ? 'danger' : 'warning'} bg-opacity-20 text-${incident.status === 'down' ? 'danger' : 'warning'} mt-0.5 mr-3`}>\r\n                                <i className={`fas fa-${incident.status === 'down' ? 'exclamation-circle' : 'exclamation-triangle'} text-sm`}></i>\r\n                              </span>\r\n                              <div>\r\n                                <h5 className=\"font-medium mb-1\">{incident.title}</h5>\r\n                                <p className=\"text-sm text-gray-400 mb-2\">{incident.description}</p>\r\n                                <div className=\"text-xs text-gray-500 font-mono\">\r\n                                  {formatIncidentDate(incident.startTime, incident.endTime)}\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    ) : (\r\n                      <p className=\"text-sm text-gray-400\">{t.noIncidentsReported || 'No incidents reported'}</p>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </div>\r\n      \r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ServiceDetail;\r\n"],"names":["localeMap","it","en","enUS","es","fr","de","pt","ru","zh","zhCN","ja","UptimeHistoryDisplay","history","t","language","useSettings","sortedHistory","sort","a","b","Date","date","getTime","mounted","setMounted","React","useState","useEffect","setTimeout","clearTimeout","jsx","TooltipProvider","children","className","map","item","index","statusColor","status","percentage","uptimePercentage","textColor","getTextColor","displayDate","dateString","format","locale","formatDate","tooltipText","charAt","toUpperCase","slice","jsxs","Tooltip","TooltipTrigger","asChild","style","width","TooltipContent","side","UptimeChart","canvasRef","useRef","drawChart","canvas","current","ctx","getContext","data","cutoff","recent","h","dateObj","filter","byHour","Map","hourBucket","setMinutes","set","time","uptime","Array","from","values","buildLast24hSeries","height","padding","chartWidth","chartHeight","clearRect","fillStyle","fillRect","strokeStyle","lineWidth","i","y","beginPath","moveTo","lineTo","stroke","x","length","font","textAlign","textBaseline","fillText","noHistoryAvailable","lineCap","lineJoin","gradient","createLinearGradient","addColorStop","forEach","point","pointColor","arc","Math","PI","fill","value","dataIndex","floor","timeString","getHours","toString","padStart","uptimeHistory","rect","getBoundingClientRect","window","devicePixelRatio","scale","ref","ServiceDetail","match","params","useRoute","isMobileMenuOpen","setIsMobileMenuOpen","searchTerm","setSearchTerm","categories","isLoading","isCategoriesLoading","useQuery","queryKey","statusSummary","isSummaryLoading","service","isServiceLoading","error","serviceError","slug","enabled","refetchInterval","refetchOnWindowFocus","services","isServicesLoading","isHistoryLoading","id","incidents","isIncidentsLoading","toggleMobileMenu","formatIncidentDate","startTime","endTime","start","to","toPresent","loadingServices","formattedLastChecked","lastChecked","formatTimeAgo","unknown","Header","onMenuToggle","onSearch","term","Sidebar","MobileMenu","isOpen","onClose","href","logo","getServiceIcon","name","StatusBadge","lastCheck","currentStatus","responseTime","uptime30d","lastOutage","noRecentOutages","avgResponse","round","reduce","sum","recentIncidents","incident","title","description","noIncidentsReported","Footer"],"mappings":"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"}