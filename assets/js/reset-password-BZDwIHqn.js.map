{"version":3,"file":"reset-password-BZDwIHqn.js","sources":["../../../src/pages/reset-password.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\r\nimport { useLocation } from 'wouter';\r\nimport { useForm } from 'react-hook-form';\r\nimport { z } from 'zod';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Eye, EyeOff } from 'lucide-react';\r\nimport { useSettings } from '@/hooks/use-settings';\r\n\r\nconst resetSchema = z.object({\r\n  token: z.string().min(1),\r\n  password: z.string().min(6, 'La password deve essere almeno 6 caratteri'),\r\n  confirmPassword: z.string().min(1)\r\n}).refine((d) => d.password === d.confirmPassword, {\r\n  message: 'Le password non corrispondono',\r\n  path: ['confirmPassword']\r\n});\r\n\r\nexport default function ResetPasswordPage() {\r\n  const [location, navigate] = useLocation();\r\n  // Leggiamo il token direttamente dalla URL reale per evitare edge con wouter\r\n  const tokenParam = useMemo(() => new URLSearchParams(window.location.search).get('token') || '', []);\r\n  const { t } = useSettings();\r\n  const [message, setMessage] = useState<string | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [showPwd, setShowPwd] = useState(false);\r\n  const [showConfirm, setShowConfirm] = useState(false);\r\n\r\n  const form = useForm<z.infer<typeof resetSchema>>({\r\n    resolver: zodResolver(resetSchema),\r\n    defaultValues: { token: tokenParam, password: '', confirmPassword: '' }\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (tokenParam) {\r\n      form.setValue('token', tokenParam);\r\n    }\r\n  }, [tokenParam]);\r\n\r\n  const onSubmit = async (data: z.infer<typeof resetSchema>) => {\r\n    setIsLoading(true);\r\n    setMessage(null);\r\n    try {\r\n      const res = await fetch('/api/reset-password', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        credentials: 'include',\r\n        body: JSON.stringify({ token: data.token, password: data.password })\r\n      });\r\n      const payload = await res.json().catch(() => ({}));\r\n      if (res.ok) {\r\n        setMessage(t?.success || 'Password aggiornata con successo. Verrai reindirizzato alla schermata di login.');\r\n        setTimeout(() => navigate('/auth'), 1500);\r\n      } else {\r\n        setMessage(payload?.message || t?.error || 'Errore durante il reset della password');\r\n      }\r\n    } catch (err) {\r\n      setMessage(t?.error || 'Errore di rete');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\r\n      <div className=\"w-full max-w-md\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>{t?.resetPasswordTitle || 'Reset Password'}</CardTitle>\r\n            <CardDescription>{t?.resetPasswordSubtitle || 'Inserisci la nuova password'}</CardDescription>\r\n          </CardHeader>\r\n          <form onSubmit={form.handleSubmit(onSubmit)}>\r\n            <CardContent className=\"space-y-4\">\r\n              <Input type=\"hidden\" {...form.register('token')} />\r\n              <div>\r\n                <label className=\"block mb-1 text-sm\">{t?.newPassword || 'Nuova password'}</label>\r\n                <div className=\"relative\">\r\n                  <Input type={showPwd ? 'text' : 'password'} {...form.register('password')} />\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"absolute inset-y-0 right-2 flex items-center text-muted-foreground hover:text-foreground\"\r\n                    onClick={() => setShowPwd((v) => !v)}\r\n                    aria-label={showPwd ? (t?.hidePassword || 'Nascondi password') : (t?.showPassword || 'Mostra password')}\r\n                  >\r\n                    {showPwd ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\r\n                  </button>\r\n                </div>\r\n                <div className=\"text-sm text-red-400\">{form.formState.errors.password?.message as any}</div>\r\n              </div>\r\n              <div>\r\n                <label className=\"block mb-1 text-sm\">{t?.confirmPassword || 'Conferma password'}</label>\r\n                <div className=\"relative\">\r\n                  <Input type={showConfirm ? 'text' : 'password'} {...form.register('confirmPassword')} />\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"absolute inset-y-0 right-2 flex items-center text-muted-foreground hover:text-foreground\"\r\n                    onClick={() => setShowConfirm((v) => !v)}\r\n                    aria-label={showConfirm ? (t?.hidePassword || 'Nascondi password') : (t?.showPassword || 'Mostra password')}\r\n                  >\r\n                    {showConfirm ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\r\n                  </button>\r\n                </div>\r\n                <div className=\"text-sm text-red-400\">{form.formState.errors.confirmPassword?.message as any}</div>\r\n              </div>\r\n              {!tokenParam && (\r\n                <div className=\"text-sm text-muted-foreground\">\r\n                  {t?.noValidToken || 'Non hai un token valido?'}{' '}\r\n                  <button type=\"button\" className=\"text-orange-500 hover:underline\" onClick={() => navigate('/forgot-password')}>\r\n                    {t?.requestNewReset || 'Richiedi un nuovo link di reset'}\r\n                  </button>\r\n                </div>\r\n              )}\r\n              {message && <div className=\"text-sm text-gray-300 whitespace-pre-wrap break-words\">{message}</div>}\r\n            </CardContent>\r\n            <CardFooter>\r\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\r\n                {isLoading ? (t?.sending || 'Invio...') : (t?.updatePassword || 'Aggiorna Password')}\r\n              </Button>\r\n            </CardFooter>\r\n          </form>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n"],"names":["resetSchema","z.object","token","z.string","min","password","confirmPassword","refine","d","message","path","ResetPasswordPage","location","navigate","useLocation","tokenParam","useMemo","URLSearchParams","window","search","get","t","useSettings","setMessage","useState","isLoading","setIsLoading","showPwd","setShowPwd","showConfirm","setShowConfirm","form","useForm","resolver","zodResolver","defaultValues","useEffect","setValue","jsx","className","children","jsxs","Card","CardHeader","CardTitle","resetPasswordTitle","CardDescription","resetPasswordSubtitle","onSubmit","handleSubmit","async","data","res","fetch","method","headers","credentials","body","JSON","stringify","payload","json","catch","ok","success","setTimeout","error","err","CardContent","Input","type","register","newPassword","onClick","v","hidePassword","showPassword","EyeOff","Eye","formState","errors","noValidToken","requestNewReset","CardFooter","Button","disabled","sending","updatePassword"],"mappings":"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"}